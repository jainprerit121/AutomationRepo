<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="AdminAppRESTfulProject" resourceRoot="${projectDir}" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS User Profile RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.10.21.98:8080</con:endpoint></con:endpoints><con:resource name="Profile" path="/lms/api/user/profile"><con:settings/><con:parameters/><con:method name="Profile" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>401 403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element>Person</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prof="http://10.10.21.98/lms/api/user/profile">prof:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Organizations RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.10.21.98:8080</con:endpoint></con:endpoints><con:resource name="Organizations" path="/lms/api/organizations"><con:settings/><con:parameters/><con:method name="Organizations" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element>organizations</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403 401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://10.10.21.98/lms/api/organizations">org:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/organizations</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Organizations OID RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Oid" path="/lms/api/organizations/{oid}"><con:settings/><con:parameters><con:parameter><con:name>oid</con:name><con:value>oid</con:value><con:style>TEMPLATE</con:style><con:default>oid</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Oid" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://10.40.222.44/lms/api/organizations/39">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>401 404 403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://10.40.222.44/lms/api/organizations/39">ns:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/39</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oid" value="76" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oid</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Organization Add RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Organizations" path="/lms/api/organizations"><con:settings/><con:parameters/><con:method name="Organizations" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=ISO-8859-1</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=ISO-8859-1</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201 200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://10.40.222.44/lms/api/organizations">org:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "productId": "1",
    "organizationName": "New School123",
    "organizationTypeId": "2",
    "organizationDistrictNum": "IND2",
    "parentOrganizationId": "1",
    "sifRefId": "SuccessMaker"
}</con:request><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS District RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="District" path="/lms/api/organizations/orgtype/district"><con:settings/><con:parameters/><con:method name="District" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dis="http://10.40.222.44/lms/api/organizations/orgtype/district">dis:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/orgtype/district</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Properties RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Properties" path="/lms/api/lmsproperties"><con:settings/><con:parameters/><con:method name="Properties" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prop="http://10.40.222.44/lms/api/properties">prop:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.10.21.98:8080</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/properties</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Organization Update RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Organizations" path="/lms/api/organizations"><con:settings/><con:parameters/><con:method name="OrganizationsUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200 201</con:status><con:params/><con:element xmlns:org="http://10.40.222.44/lms/web/organizations">org:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:org="http://10.40.222.44/lms/web/organizations">org:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element>errors</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Organization By OrgTypeId RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Organizations" path="/lms/api/organizations"><con:settings/><con:parameters/><con:method name="Organizations" method="GET"><con:settings/><con:parameters><con:parameter><con:name>orgTypeId</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:default>1</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403 404 401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://10.40.222.44/lms/web/organizations">org:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic c3VwZXI6c3VwZXI=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/web/organizations</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="orgTypeId" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Organization By OrgTypeId PersonId RESTful Service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Organizations" path="/lms/api/organizations"><con:settings/><con:parameters><con:parameter><con:name>orgTypeId</con:name><con:value>1</con:value><con:style>QUERY</con:style><con:default>1</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>personIds</con:name><con:value>4094,4565</con:value><con:style>QUERY</con:style><con:default>4094,4565</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Organizations" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://10.40.222.44/lms/api/organizations">org:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://10.40.222.44/lms/api/organizations">org:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic c3VwZXI6c3VwZXI=" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personIds" value="-999,2,10" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry><con:entry>personIds</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS ProficiencyScaleSettings RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Profscalesettings" path="/lms/api/organizations/{orgId}/datasettings"><con:settings/><con:parameters><con:parameter><con:name>orgId</con:name><con:value>orgId</con:value><con:style>TEMPLATE</con:style><con:default>orgId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>prodId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Profscalesettings" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>401 404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element>errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prof="http://10.40.222.44/lms/api/organizations/669/profscalesettings">prof:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="prodId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry>prodId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS ProficiencyScaleSettings_options RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Prodorgoptions" path="/lms/api/organizations/{orgId}/prodorgoptions"><con:settings/><con:parameters><con:parameter><con:name>orgId</con:name><con:value>orgId</con:value><con:style>TEMPLATE</con:style><con:default>orgId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>prodId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Prodorgoptions" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="prodId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry>prodId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS proficiencyscalesettings_edit RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Profscalesettings" path="/lms/api/organizations/{orgId}/datasettings"><con:settings/><con:parameters><con:parameter><con:name>orgId</con:name><con:value>orgId</con:value><con:style>TEMPLATE</con:style><con:default>orgId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Profscalesettings" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>500 400</con:status><con:params/><con:element>errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prof="http://10.40.222.44/lms/api/organizations/670/profscalesettings">prof:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>
{"proficiencyScaleSettings": [
        {
            "proficiencyScaleId": 2979,
            "prodOrgId": 671,
            "proficiencyScaleName": "90-100%",
            "proficiencyScaleStartPctRange": 90,
            "proficiencyScaleEndPctRange": 100
        },
        {
            "proficiencyScaleId": 2980,
            "prodOrgId": 671,
            "proficiencyScaleName": "85-89%",
            "proficiencyScaleStartPctRange":85,
            "proficiencyScaleEndPctRange": 89
        }

 ],
    "prodOrgOptions": [
      {
      "prodOrgOptionId": 1386,
      "prodOrgId": 671,
      "prodOrgOptionName": "Require student demographic data:",
      "prodOrgOptionValue": "yes"
   },
      {
      "prodOrgOptionId": 1387,
      "prodOrgId": 671,
      "prodOrgOptionName": "Capture research data:",
      "prodOrgOptionValue": "yes"
   }
]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>orgId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS Licenses RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="License" path="/lms/api/license"><con:settings/><con:parameters><con:parameter><con:name>personId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>orgId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="License" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry><con:entry>orgId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS OrganizationProdInfo RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Prodinfo" path="/lms/api/license/prodinfo"><con:settings/><con:parameters><con:parameter><con:name>personId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Prodinfo" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element>errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prod="http://10.40.222.44/lms/api/license/prodinfo">prod:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LMS AddLicense RESTful service" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.40.222.44</con:endpoint></con:endpoints><con:resource name="Add" path="/lms/api/license/add"><con:settings/><con:parameters/><con:method name="Add" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:add="http://10.40.222.44/lms/api/license/add">add:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{

"licenseKey": "40zKF&lt;h1BG7%5btdsRSzD>Ypq>K@#g0C9?Y#ftr6F$+Cr&lt;LkzNLj7SJM",
"organizationId": 1
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="UserProfileTest-super"><con:description>To verify the System Admin login(super), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="6d8eef2b-fc87-4b59-889c-55a53f7f6bcc"><con:description>To verify the System Admin login(super), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")

/**
	Test Data:
	
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/**** SUPER ADMIN or SYSTEM ADMIN *****/
def user  = "super"
def pwd   = "super"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SUPER ADMIN>>" + encoded

testRunner.testCase.testSuite.project.setPropertyValue("SuperAuthorization",encoded)
testRunner.testCase.getTestStepByName("UserProfileTest-super").getTestRequest().setRequestHeaders(headers)



// get a reference to the library "Utilities" 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-super"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-super" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response
try {
assert json.userName == "super"
assert json.personId == "2"
assert json.firstName == "super"
assert json.lastName == "super"
assert json.userPassword != null
assert json.schoolName == "District"
assert json.genderId == "-10"
assert json.personTypeId == "4"
}
catch(Exception e) {
	e.printStackTrace()
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get personID"><con:settings/><con:config><script>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper




def jsonres = testRunner.getTestCase().getTestStepByName("UserProfileTest-super").getProperty('Response').getValue()
log.info jsonres
def slurper = new JsonSlurper()
def json = slurper.parseText jsonres 
log.error json

def personID = json.personId
log.error personID

testRunner.testCase.testSuite.project.setPropertyValue("PersonId_super", personID)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-adminschool"><con:description>To verify the school admin login(adminschool), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="9be0fc36-2ec5-4c74-a3fe-3567560e4eef"><con:description>To verify the school admin login(adminschool), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/


/****  ADMIN SCHOOL *****/
user  = "adminschool"
pwd   = "adminschool"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "ADMIN SCHOOL>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-adminschool").getTestRequest().setRequestHeaders(headers)



// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-adminschool"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-adminschool" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YWRtaW5zY2hvb2w6YWRtaW5zY2hvb2w="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services")


//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response
	
	assert json == null
	assert json.userName != "adminschool"
	assert json.firstName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch(Exception e) {
	e.printStackTrace()	
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-admindistrict"><con:description>To verify the district admin login(admindistrict), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="4991a7a4-c707-43c6-92a5-5175befb564a"><con:description>To verify the district admin login(admindistrict), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/


/****  ADMIN District *****/
user  = "admindistrict"
pwd   = "admindistrict"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "ADMIN DISTRICT>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-admindistrict").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-admindistrict"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-admindistrict" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YWRtaW5kaXN0cmljdDphZG1pbmRpc3RyaWN0="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response
	
	assert json == null
	assert json.userName != "admindistrict"
	assert json.firstName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch (Exception e) {
	e.printStackTrace()
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-sys1"><con:description>To verify the System Admin login(sys1), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="60a30f7a-1852-47b7-875a-8fc0d98f98bc"><con:description>To verify the System Admin login(sys1), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  SYS1 *****/
user  = "sys1"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SYS1 SCHOOL>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-sys1").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-sys1"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-sys1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3lzMTphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert ! resHeaders["#status#"][0].contains("403 Forbidden")
assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("The user's role is not authorized to access these services")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response
	
	assert json != null
	assert json.userName == "sys1"
	assert json.firstName == "sys"
	assert json.lastName == "1"
	assert json.guid != null
	assert json.userPassword != null
}
catch(Exception e) {
	e.printStackTrace()
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-sys2"><con:description>To verify the System Admin login(sys2), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="9708e328-27cd-4c75-ae59-0ea1e3514743"><con:description>To verify the System Admin login(sys2), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  SYS2 *****/
user  = "sys2"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SYS2 SCHOOL>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-sys2").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-sys2"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-sys2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3lzMjphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert ! resHeaders["#status#"][0].contains("403 Forbidden")
assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("The user's role is not authorized to access these services")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response
	
	assert json != null
	assert json.userName == "sys2"
	assert json.firstName != null
	assert json.lastName != null
	assert json.guid != null
	assert json.userPassword != null
}
catch (Exception e) {
	e.printStackTrace()
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-dist1"><con:description>To verify the district admin login(dist1), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="e9e094c1-5e8c-4810-baa9-cd320b813c18"><con:description>To verify the district admin login(dist1), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  DIST1 *****/
user  = "dist1"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "DIST1 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-dist1").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-dist1"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-dist1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ZGlzdDE6YWRtaW4xMjMq="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json == null
	assert json.userName != "dist1"
	assert json.firstrName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch(Exception e) {
	e.printStackTrace()
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-dist2"><con:description>To verify the district admin login(dist2), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="a5c3c353-198d-43e7-b76f-b0189da0f8e6"><con:description>To verify the district admin login(dist2), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  DIST2 *****/
user  = "dist2"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "DIST2 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-dist2").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-dist2"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-dist2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ZGlzdDI6YWRtaW4xMjMq="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services.")
assert ! response.contains("User does not exist.")


//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response
	
	assert json == null
	assert json.userName != "dist2"
	assert json.firstrName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch(Exception e) {
	e.printStackTrace()	
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-school1"><con:description>To verify the school admin login(school1), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="1012f637-b7e2-424c-ab5d-a447ad1bbd0d"><con:description>To verify the school admin login(school1), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  SCHOOL1 *****/
user  = "school1"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SCHOOL1 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-school1").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-school1"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-school1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c2Nob29sMTphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services.")
assert ! response.contains("User does not exist.")


//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response
	
	assert json == null
	assert json.userName != "school1"
	assert json.firstrName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch(Exception e) {
	e.printStackTrace()
	
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-school2"><con:description>To verify the school admin login(school2), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="f4d8812b-deb1-403a-90a1-15cd4d0432e1"><con:description>To verify the school admin login(school2), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  SCHOOL2 *****/
user  = "school2"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SCHOOL2 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-school2").getTestRequest().setRequestHeaders(headers)



// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-school2"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-school2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c2Nob29sMjphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services.")
assert ! response.contains("User does not exist.")


//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json == null
	assert json.userName != "school2"
	assert json.firstrName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch(Exception e) {
	e.printStackTrace();
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-gradeone"><con:description>To verify the Teacher login(gradeone), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="42fb6f33-120e-4c91-bf97-f58cea91cc2b"><con:description>To verify the Teacher login(gradeone), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/


/****  GRADEONE *****/
user  = "gradeone"
pwd   = "gradeone"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "GRADEONE >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-gradeone").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-gradeone"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-gradeone" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic Z3JhZGVvbmU6Z3JhZGVvbmU="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services.")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json == null
	assert json.userName != "gradeone"
	assert json.firstrName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch(Exception e) {
	e.printStackTrace()
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTest-stuka"><con:description>To verify the student login(stuka), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="f0521bb4-87ad-4528-8252-d497503d2431"><con:description>To verify the student login(stuka), we convert login credentials to the Base64 encoding and pass it to the headers.</con:description><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/****  STUKA *****/
user  = "stuka"
pwd   = "stuka"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
//encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "STUKA >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-stuka").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-stuka"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-stuka" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3R1a2E6c3R1a2E="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("403 Forbidden")
assert ! resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert  response.contains("not authorized")
assert  response.contains("The user's role is not authorized to access these services.")
assert ! response.contains("User does not exist.")



//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json == null
	assert json.userName != "stuka"
	assert json.firstrName == null
	assert json.lastName == null
	assert json.guid == null
	assert json.userPassword == null
}
catch (Exception e) {
	e.printStackTrace()

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationsTestSuper-Positive"><con:description>This Testcases is used to verify the List of organizations pertaining to System admin(super). 
System admin authentication is required.
Checking Response of the testcase is not null.
We are setting  Property values for ' MaxOid', 'ByOid' and 'OidTest-Negative' values on main project property from the response recieved from this testcase. 
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="2e86b8fd-f5c5-43f0-bb7e-8b71f7daa021"><con:description>This Testcases is used to verify the List of organizations pertaining to System admin(super). 
System admin authentication is required.
Checking Response of the testcase is not null.
We are setting  Property values for ' MaxOid', 'ByOid' and 'OidTest-Negative' values on main project property from the response recieved from this testcase. 
</con:description><con:settings/><con:testStep type="groovy" name="SetupRESTfulTests"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("OrganizationsTest-Positive").getTestRequest().setRequestHeaders(headers)



// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) </script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationsTest-Positive"><con:settings/><con:config service="LMS Organizations RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationsTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.organization.size()
assert json.organization.size() > 1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="FetchOrganizationOid"><con:settings/><con:config><script>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper



def response = context.response //.responseContent
log.info response
def slurper = new JsonSlurper()
def json = slurper.parseText response
//moving entity id from product listing page to add to cart 

def jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationsTest-Positive").getProperty('Response').getValue()
log.error jsonreq
def list = slurper.parseText jsonreq 
log.error list
log.info list["organization"]["organizationId"][2]
//testRunner.testCase.testSuite.project.setPropertyValue("ByOid",list["organization"]["organizationId"][1])
testRunner.testCase.testSuite.project.setPropertyValue("OidTest-Negative","-999")
log.info list["organization"]["organizationId"][1]



log.info list["organization"]["organizationId"]


def lst = []
for (c in list["organization"]["organizationId"]) {
    lst.add(Integer.parseInt(c))
}

lst = lst.sort()
log.info lst
log.error lst.max()
//testRunner.testCase.testSuite.project.setPropertyValue("ByOid","670")
testRunner.testCase.testSuite.project.setPropertyValue("MaxOid",""+lst.max())

/***
//for(String entityid : list["productList"]["entity_id"]) {
	//log.error entityid
jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationBYOidTest-Positive").getProperty('Request').getValue()
	log.error jsonreq
	def jsonNew = jsonreq.replaceAll(/organizationId.:\"[0-9]*\"/,"organizationId":\"list["organization"]["organizationId"][2]"\"")
	log.info jsonNew
	testRunner.getTestCase().getTestStepByName("OrganizationBYOidTest-Positive").getProperty('Request').setValue(jsonNew)


//	testRunner.runTestStepByName( "Add to cart 1")
//}

// "organizationId": "56",
***/</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationsTestSuper-Negative"><con:description>The organizations list is accessed without the System admin authentication. It should not let the system Admin to access the list of organizations.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="56c99f09-07ed-4cc9-9e4d-0c9b5b5ae766"><con:description>The organizations list is accessed without the System admin authentication. It should not let the system Admin to access the list of organizations.


</con:description><con:settings/><con:testStep type="groovy" name="SetupRESTfulTests"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")

testRunner.testCase.getTestStepByName("OrganizationsTest-Negative").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) </script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationsTest-Negative"><con:settings/><con:config service="LMS Organizations RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationsTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("401 Unauthorized")

assert response != null
assert ! response.contains("not authorized")
assert ! response.contains("Browser component is disabled.")
assert response.contains("No credentials have been provided.")
assert ! response.contains("User does not exist.")
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationBYOidTest-Positive"><con:description>This Testcases is to get the organizations detail by providing Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="2a341b33-da5c-4643-9ee6-210e5b1855fd"><con:description>This Testcases is to get the organizations detail by providing Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("OrganizationBYOidTest-Positive").getTestRequest().setRequestHeaders(headers)





// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="GetOrganizationByOidTest-Positive"><con:settings/><con:config><script>import groovy.sql.Sql
import org.postgresql.Driver

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("org.postgresql.Driver")

def testRequest = testRunner.testCase.getTestStepByName("OrganizationBYOidTest-Positive").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

library = testRunner.testCase.testSuite.project.testSuites["LibrarySuite"]
module = library.testCases["DBConnect"].testSteps["Connect_DB"]


//Connecting DB
module.run(testRunner, context)
def connDB = context.Connect_DB

//Selecting Random Org ID from Organization Table and set it as ByOid property
def rSet = connDB.execute_Query("SELECT * from school.organization order by random() fetch first 1 row only")
testRunner.testCase.testSuite.project.setPropertyValue( "ByOid", rSet[0]['organization_id'].toString() )

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }
log.info "Org ID is set!"

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
      log.info "Name is ${properties.key}"
      value1 = properties.key

        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value in request is: ${value}"        
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   log.info "queryString is ${value}"   
   return queryString
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationBYOidTest-Positive"><con:settings/><con:config service="LMS Organizations OID RESTful Service" resourcePath="/lms/api/organizations/{oid}" methodName="Oid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationBYOidTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/39</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.productId == "1"
assert json.organizationTypeId == "2"|| "3"
assert json.parentOrganizationId == "1"
assert json.sifRefId != null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oid" value="1331" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ValidateByOid"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = context.response
log.info " V E R I F Y I N G   T H E   R E S P O N S E"

//Basic Verification
assert response != null
assert !response.contains("Service Temporarily Unavailable")
log.info "Response is NOT null and service is available"

//Check response code and status
String respStatus = testRunner.testCase.testSteps["OrganizationBYOidTest-Positive"].testRequest.response.responseHeaders["#status#"]
assert respStatus.contains('HTTP/1.1 200 OK')
log.info "Response status code and message  verified! - 200 OK"

//JSON Asserts - Parsing the JSON Response
def slurper = new JsonSlurper()
def json = slurper.parseText response


//Fetching the Org Data from Database
library = testRunner.testCase.testSuite.project.testSuites["LibrarySuite"]
module = library.testCases["DBConnect"].testSteps["Connect_DB"]
module.run(testRunner, context)
def connDB = context.Connect_DB

//Refering the existing current result set
def orgData = context.CurrResSet

//Verifying the response data
assert json.organizationId == orgData[0]['organization_id'].toString()
assert json.organizationName == orgData[0]['organization_name'].toString()
assert json.organizationTypeId == orgData[0]['organization_type_id'].toString()
assert json.parentOrganizationId == orgData[0]['parent_organization_id'].toString()
assert json.sifRefId == orgData[0]['sif_refid'].toString()

//Verifying the product id to which the organization belongs to
def rSet = connDB.execute_Query("select product_id from school.organization_product where  organization_id =" + testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
assert json.productId == rSet[0]['product_id'].toString()
log.info "Verified organization data!"</script></con:config></con:testStep><con:testStep type="groovy" name="DelOrgName" disabled="true"><con:settings/><con:config><script>//Fetching the Org Data from Database
library = testRunner.testCase.testSuite.project.testSuites["LibrarySuite"]
module = library.testCases["DBConnect"].testSteps["Connect_DB"]
module.run(testRunner, context)
def connDB = context.Connect_DB

//Verifying the product id to which the organization belongs to
def rSet = connDB.deleteOrganization("w72w4w")
log.error(rSet)
//assert "1" == rSet[0].toString()
log.info "Verified organization data!"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationBYOidTest-Negative"><con:description>This Testcases is to get the organizations detail by providing negative case of Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id is not recieved in the response with the ID which is provided in the request.
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="bf8d6eee-c3ea-41fe-9c90-05ee7ef1258e"><con:description>This Testcases is to get the organizations detail by providing negative case of Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id is not recieved in the response with the ID which is provided in the request.
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("OrganizationBYOidTest-Negative").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) </script></con:config></con:testStep><con:testStep type="groovy" name="OrganizationByOidTest-Negative"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("OrganizationBYOidTest-Negative").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("OidTest-Negative"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   log.info "queryString is ${value}"   
   return queryString
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationBYOidTest-Negative"><con:settings/><con:config service="LMS Organizations OID RESTful Service" resourcePath="/lms/api/organizations/{oid}" methodName="Oid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationBYOidTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/39</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("404 Not Found")

//assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert response.contains("The requested resource () is not available")






</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oid" value="-999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="AddOrganizationsTest-Positive"><con:description>Testcase to Add new Organizations under System admin(super).
Need to provide OrganizationName, and organizationDistrictNum in the request. Fetch the 'MaxOid' property value from the project property, increment it by 1 and add to the OrganizationName "NEWSCHOOL", and organizationDistrictNum "IND"
System admin authentication is required.
Added check for OrganizationName not more than 75 charecters, and organizationDistrictNum not more than 7 charecter
Checking Response status =1</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="40143489-d1c9-47e1-a98b-2a3de0ca1a12"><con:description>Testcase to Add new Organizations under System admin(super).
Need to provide OrganizationName, and organizationDistrictNum in the request. Fetch the 'MaxOid' property value from the project property, increment it by 1 and add to the OrganizationName "NEWSCHOOL", and organizationDistrictNum "IND"
System admin authentication is required.
Checking Response status =1
</con:description><con:settings/><con:testStep type="groovy" name="SuperAuthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("AddOrganizationsTest-Positive").getTestRequest().setRequestHeaders(headers)



// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 



//increment the ID
/**** Used to RESET the Req
  
{
    "productId": "1",
    "organizationName": "New Schooltest1",
    "organizationTypeId": "2",
    "organizationDistrictNum": "UDP1",
    "parentOrganizationId": "1",
    "sifRefId": "SuccessMaker"
}  
 
****/

def orgName = "NEWSCHOOL" + (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)
def distNum = "IND" + (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)

log.error orgName
log.error distNum
log.error orgName.length()
log.error distNum.length()

//assert orgName.length()&lt;= 75 &amp;&amp; distNum.length()&lt;= 7


/**/
jsonreq = testRunner.getTestCase().getTestStepByName("AddOrganizationsTest-Positive").getProperty('Request').getValue()
jsonNew = jsonreq.replaceAll(/organizationName.:.[A-Z0-9]*./,"organizationName\":\""+orgName +"\"")
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationDistrictNum.:.[A-Z0-9]*./,"organizationDistrictNum\":\""+distNum +"\"")
testRunner.getTestCase().getTestStepByName("AddOrganizationsTest-Positive").getProperty('Request').setValue(jsonNew)
</script></con:config></con:testStep><con:testStep type="restrequest" name="AddOrganizationsTest-Positive"><con:settings/><con:config service="LMS Organization Add RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOrganizationsTest-Positive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "productId": "1",
    "organizationName":"NEWSCHOOL1335",
    "organizationTypeId": "2",
    "organizationDistrictNum":"IND1335",
    "parentOrganizationId": "1",
    "sifRefId": "SuccessMaker"
}  </con:request><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper

def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response


//RESPONSE asserts
assert response == null
assert resHeaders != null
assert resHeaders["#status#"][0].contains("201 Created")


try {
	assert ! response.contains("Service Temporarily Unavailable")
	assert ! response.contains("ERROR: Organization Name Exists")
	assert ! response.contains("ERROR: Organization ID Exists")
	assert ! response.contains("Parent Organization Does Not Exist")



	//JSON Asserts
	def slurper = new JsonSlurper()
	def json = slurper.parseText response

	assert json == null
	assert json.status != "1"
}
catch(Exception e) 
{
	log.warn("failure")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyOrganizationId" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper





def jsonreq = testRunner.getTestCase().getTestStepByName("AddOrganizationsTest-Positive").getProperty('Request').getValue()
log.error jsonreq
log.info list["organizationName"][0]




//log.info list["organizationId"][0]
//testRunner.testCase.testSuite.project.setPropertyValue("LicenseOid",list["organizationId"][0].toString())
//
//log.info list["licenseKey"][0]
//testRunner.testCase.testSuite.project.setPropertyValue("ProdLicensekey",list["licenseKey"][0])
//
//
//def response = context.response
//log.warn response
////RESPONSE asserts
//assert response != null
//assert ! response.contains("Service Temporarily Unavailable")
//assert ! response.contains("ERROR: Organization Name Exists")
//assert ! response.contains("ERROR: Organization ID Exists")
//assert ! response.contains("Parent Organization Does Not Exist")
//
////def jsonreq = testRunner.getTestCase().getTestStepByName("AddOrganizationsTest-Positive").getProperty('Request').getValue()
////log.error jsonreq
//
//// ORGANIZATION asserts
//def slurper = new JsonSlurper()
//def json = slurper.parseText response
//def orgId = Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))
//log.info orgId
//assert json != null
////assert json.id ==  ""+orgId
////testRunner.testCase.testSuite.project.setPropertyValue("MaxOid",""+(Integer.parseInt(json.id)+1))
//
//
//
//
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="AddOrganizationsTest-Negative"><con:description>To verify the add organization fail case for existing organizationName/organizationDistrictNum
System admin authentication is required.
Checking Response status =0</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="11d187c3-bd88-4e11-8193-31822d82c8a1"><con:description>To verify the add organization fail case for existing organizationName/organizationDistrictNum
System admin authentication is required.
Checking Response status =0</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("AddOrganizationsTest-Negative").getTestRequest().setRequestHeaders(headers)



// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 

</script></con:config></con:testStep><con:testStep type="restrequest" name="AddOrganizationsTest-Negative"><con:settings/><con:config service="LMS Organization Add RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOrganizationsTest-Negative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "productId": "1",
    "organizationName": "New School123",
    "organizationTypeId": "2",
    "organizationDistrictNum": "IND2",
    "parentOrganizationId": "1",
    "sifRefId": "SuccessMaker"
}</con:request><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try{
assert ! response.contains("Service Temporarily Unavailable")
assert response.contains(" Organization Name Exists")

/**/
/**/


//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errorMessage == " Organization Name Exists"

}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="DistrictTest-Positive"><con:description>To verify the district pertaining to System admin(super). 
System admin authentication is required.
Checking Response of the testcase is not null, and organizationName = "District"
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="efdea7db-667f-409d-8040-4b6adaca6be8"><con:description>To verify the district pertaining to System admin(super). 
System admin authentication is required.
Checking Response of the testcase is not null, and organizationName = "District"
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("DistrictTest-Positive").getTestRequest().setRequestHeaders(headers)



// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 

</script></con:config></con:testStep><con:testStep type="restrequest" name="DistrictTest-Positive"><con:settings/><con:config service="LMS District RESTful Service" resourcePath="/lms/api/organizations/orgtype/district" methodName="District" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DistrictTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/orgtype/district</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 


// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json.organizationName == "District"
	assert json.organizationDistrictNum != null
	
}
catch(Exception e) {
	e.printStackTrace()
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="DistrictTest-Negative"><con:description>To verify the district pertaining to System admin(super) without authentication.
Should not let it access the District</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="527ec9ef-e77e-4b5c-b83b-17b35c592bbe"><con:description>To verify the district pertaining to System admin(super) without authentication.
Should not let it access the District</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()




headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")


testRunner.testCase.getTestStepByName("DistrictTest-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 

</script></con:config></con:testStep><con:testStep type="restrequest" name="DistrictTest-Negative"><con:settings/><con:config service="LMS District RESTful Service" resourcePath="/lms/api/organizations/orgtype/district" methodName="District" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DistrictTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/orgtype/district</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 


// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("401 Unauthorized")
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("The user's role is not authorized to access these services.")
assert ! response.contains("User does not exist.")
assert ! response.contains("The requested resource is not available.")


//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json.organizationName != "District"
	assert json.organizationDistrictNum != null
}
catch (Exception e) {
	e.printStackTrace()

}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="LMSPropertiesTest-Positive"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="214192ab-5359-468a-9519-967950bfd156"><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)



testRunner.testCase.getTestStepByName("LMSPropertiesTest-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 

</script></con:config></con:testStep><con:testStep type="restrequest" name="LMSPropertiesTest-Positive"><con:settings/><con:config service="LMS Properties RESTful Service" resourcePath="/lms/api/lmsproperties" methodName="Properties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LMSPropertiesTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/properties</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>

import groovy.json.JsonSlurper 


// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("The requested resource () is not available")
assert ! response.contains("The requested resource is not available.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json."lms.web_context" != null &amp;&amp; json."lms.web_context" == "successmaker"
assert json."COPYRIGHT_PEARSON_LABEL" == "Copyright © 2007-2014 Pearson Education, Inc. or its affiliates. All rights reserved."
//assert json.organizationDistrictNum == ""
}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="LMSPropertiesTest-Negative"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="132a04f7-e32e-4f4a-8bd9-94efb6cb3207"><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")


testRunner.testCase.getTestStepByName("LMSPropertiesTest-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 

</script></con:config></con:testStep><con:testStep type="restrequest" name="LMSPropertiesTest-Negative"><con:settings/><con:config service="LMS Properties RESTful Service" resourcePath="/lms/api/lmsproperties" methodName="Properties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LMSPropertiesTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/properties</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>

import groovy.json.JsonSlurper 


// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("The requested resource () is not available")
assert ! response.contains("The requested resource is not available.")


//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json."lms.web_context" != null
//assert json.organizationDistrictNum == ""

}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationsUpdateTest-Positive"><con:description>Testcase to update Organizations under System admin(super).
Fetch MaxOid and set it for organizationId in the request and update the OrganizationName and organizationDistrictNum.
System admin authentication is required.
Checking Response status =1</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="ef82ad9f-b517-4388-a801-683dca8167d8"><con:description>Testcase to update Organizations under System admin(super).
Fetch MaxOid and set it for organizationId in the request and update the OrganizationName and organizationDistrictNum.
System admin authentication is required.
Checking Response status =1</con:description><con:settings/><con:testStep type="groovy" name="AuthoriseSuper"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationsUpdateTest-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 




def orgid = testRunner.testCase.testSuite.project.getPropertyValue("MaxOid")
def orgName = "Updated" + (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)
def distNum = "up" + (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)
log.error orgid
log.error orgName
log.error distNum
log.error orgName.length()
log.error distNum.length()

//assert orgName.length()&lt;= 75 &amp;&amp; distNum.length()&lt;= 7
//log.error " checked Distnum/Organization name length doesn't exceed the limit"


jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationsUpdateTest-Positive").getProperty('Request').getValue()
jsonNew = jsonreq.replaceAll(/organizationId.:.[0-9]*./,"organizationId\":\""+orgid +"\"")
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationName.:.[A-Za-z0-9]*./,"organizationName\":\""+orgName +"\"")
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationDistrictNum.:.[A-Za-z0-9]*./,"organizationDistrictNum\":\""+distNum +"\"")
testRunner.getTestCase().getTestStepByName("OrganizationsUpdateTest-Positive").getProperty('Request').setValue(jsonNew)









</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationsUpdateTest-Positive"><con:settings/><con:config service="LMS Organization Update RESTful service" resourcePath="/lms/api/organizations" methodName="OrganizationsUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationsUpdateTest-Positive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request> {
         "productId": "1",
         "organizationId":"1334",
         "organizationName":"Updated1335",
         "organizationTypeId": "2",
         "organizationDistrictNum":"up1335",
         "parentOrganizationId": "1",
         "sifRefId": ""
      }</con:request><con:originalUri>http://10.40.222.44/lms/web/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
	assert response == null
	assert ! response.contains("Service Temporarily Unavailable")
	assert ! response.contains("not authorized")
	assert ! response.contains("User does not exist.")

	//JSON Asserts
	def slurper = new JsonSlurper()
	def json = slurper.parseText response

	assert json != null
	assert json.status == "1"
}
catch(Exception e) {
	log.warn "failed"
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationsUpdateTest-Negative"><con:description>To verify the update organization for invalid organizationId. Invalid organizationId is fetched from project property  OidTest-Negative.
System admin authentication is required.
Checking Response status =0</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="b009d4af-25a4-4be9-80e8-b641e8264d21"><con:description>To verify the update organization for invalid organizationId. Invalid organizationId is fetched from project property  OidTest-Negative.
System admin authentication is required.
Checking Response status =0</con:description><con:settings/><con:testStep type="groovy" name="AuthoriseSuper"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationsUpdateTest-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 



def orgid = testRunner.testCase.testSuite.project.getPropertyValue("MaxOid")
def orgName = "Updated" + (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)
def distNum = "update2"
log.error orgid
log.error orgName
log.error distNum


jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationsUpdateTest-Negative").getProperty('Request').getValue()
jsonNew = jsonreq.replaceAll(/organizationId.:.[0-9]*./,"organizationId\":\""+orgid +"\"")
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationName.:.[A-Za-z0-9]*./,"organizationName\":\""+orgName +"\"")
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationDistrictNum.:.[A-Za-z0-9]*./,"organizationDistrictNum\":\""+distNum +"\"")
testRunner.getTestCase().getTestStepByName("OrganizationsUpdateTest-Negative").getProperty('Request').setValue(jsonNew)


//def orgid = testRunner.testCase.testSuite.project.getPropertyValue("OidTest-Negative")
//def orgName = "Updated"
//def distNum = "Updated"
//log.error orgid
//log.error orgName
//log.error distNum
//
//
//jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationsUpdateTest-Negative").getProperty('Request').getValue()
//jsonNew = jsonreq.replaceAll(/organizationId.:.[-0-9]*./,"organizationId\":\""+orgid +"\"")
//log.error jsonNew
//jsonNew = jsonNew.replaceAll(/organizationName.:.[A-Za-z0-9]*./,"organizationName\":\""+orgName +"\"")
//log.error jsonNew
//jsonNew = jsonNew.replaceAll(/organizationDistrictNum.:.[A-Za-z0-9]*./,"organizationDistrictNum\":\""+distNum +"\"")
//testRunner.getTestCase().getTestStepByName("OrganizationsUpdateTest-Negative").getProperty('Request').setValue(jsonNew)</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationsUpdateTest-Negative"><con:settings/><con:config service="LMS Organization Update RESTful service" resourcePath="/lms/api/organizations" methodName="OrganizationsUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationsUpdateTest-Negative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding/><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
         "productId": "1",
         "organizationId":"1334",
         "organizationName":"Updated1335",
         "organizationTypeId": "2",
         "organizationDistrictNum":"update2",
         "parentOrganizationId": "1",
         "sifRefId": ""
      }</con:request><con:originalUri>http://10.40.222.44/lms/web/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")


//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.errorMessage == "The organization may already exist. Please search the organization list to edit the organization's details"
}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationByOrgTypeIdTest-Positive"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Type Id related feed is recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="457749c3-2455-4ecd-bb40-4624d7b9451b"><con:description>This Testcases is to get the organizations detail by providing Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationByOrgTypeOidTest-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationByOrgTypeOidTest-Positive"><con:settings/><con:config service="LMS Organization By OrgTypeId RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationByOrgTypeOidTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/web/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.organization.size() > 0

}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="orgTypeId" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationByOrgTypeIdDistrictTest-Positive"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id for District in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Type Id related feed is recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="b63724c6-e7b1-4820-a36b-b51a5bbebc06"><con:description>This Testcases is to get the organizations detail by providing Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationByOrgTypeIdDistrictTest-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationByOrgTypeIdDistrictTest-Positive"><con:settings/><con:config service="LMS Organization By OrgTypeId RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationByOrgTypeIdDistrictTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/web/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
log.warn response
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
assert json.organization.size() > 0
assert json.organization[0].organizationName == "District"
assert json.organization[0].organizationTypeId == "1"
assert json.organization[0].organizationDistrictNum == "D01"
assert json.organization[0].sifRefId == "SuccessMaker"
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>orgTypeId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationByOrgTypeIdDistrictTest-Negative"><con:description>This Testcases is to get the organizations detail by providing wrong Organization Type Id for District in the request. Here we fetch the organizationTypeId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Type Id related feed is recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="f3d2f563-7f73-48ec-8f58-ce57dabcd125"><con:description>This Testcases is to get the organizations detail by providing Organization Id in the request. Here we fetch the organizationId from project property.
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationByOrgTypeIdDistrictTest-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationByOrgTypeIdDistrictTest-Negative"><con:settings/><con:config service="LMS Organization By OrgTypeId RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationByOrgTypeIdDistrictTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/web/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("404 Not Found")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")
assert response.contains("The requested resource () is not available.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json != null
	assert json.organization.size() == 0

}
catch(Exception e) {

	log.info(" Failed OrgByOrgTypeId")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="orgTypeId" value="-999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationByOrgTypeIdPersonIdsTest-Positive"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id, PersonIds in the request. 
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Type Id, PersonIds related feed is recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="a674d5da-38aa-46e0-b658-5000ec75b665"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id, Person Id in the request. 
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id , Person Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)
testRunner.testCase.getTestStepByName("OrganizationByOrgTypeIdPersonIdsTest-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationByOrgTypeIdPersonIdsTest-Positive"><con:settings/><con:config service="LMS Organization By OrgTypeId PersonId RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationByOrgTypeIdPersonIdsTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json != null
	assert json.organization.size() > 0
	assert json.organization[0].organizationName == "District"
	assert json.organization[0].organizationId == "1"
	assert json.organization[0].sifRefId == "SuccessMaker"
}
catch(Exception e) {
	log.warn("json issue")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personIds" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry><con:entry>personIds</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationByOrgTypeIdPersonIdsTest-Negative"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id, wrong PersonIds in the request. 
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Type Id, PersonIds related feed is not recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="c3ebdbb3-f0cd-4c9f-9fae-1c2ba8643d63"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id, Person Id in the request. 
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id , Person Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationByOrgTypeIdPersonIdsTest-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationByOrgTypeIdPersonIdsTest-Negative"><con:settings/><con:config service="LMS Organization By OrgTypeId PersonId RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationByOrgTypeIdPersonIdsTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("404 Not Found")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json != null
	assert json.organization.size() > 0
	assert json.organization[0].organizationName == "District"
	assert json.organization[0].organizationId == "1"
	assert json.organization[0].sifRefId == "SuccessMaker"
}
catch(Exception e) {
	log.warn("json issue")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personIds" value="-999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry><con:entry>personIds</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationByOrgTypeIdMultiplePersonIdsTest-Positive"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id, multiple valid and invalid PersonIds in the request. 
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Type Id, PersonIds related feed is recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="f81bfb63-0239-4451-9379-9aacc0bf9183"><con:description>This Testcases is to get the organizations detail by providing Organization Type Id, Person Id in the request. 
System admin authentication is required.
Checking Response of the testcase is not null.
Validating the Organization Id , Person Id recieved in the response with the ID which is provided in the request
</con:description><con:settings/><con:testStep type="groovy" name="SetHeaders"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("OrganizationByOrgTypeIdMultiplePersonIdsTest-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationByOrgTypeIdMultiplePersonIdsTest-Positive"><con:settings/><con:config service="LMS Organization By OrgTypeId PersonId RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationByOrgTypeIdMultiplePersonIdsTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
try {
	def json = slurper.parseText response

	assert json != null
	assert json.organization.size() > 0
	assert json.organization[0].organizationName == "District"
	assert json.organization[0].organizationId == "1"
	assert json.organization[0].sifRefId == "SuccessMaker"
}
catch(Exception e) {
	log.warn("json issue")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personIds" value="2" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgTypeId</con:entry><con:entry>personIds</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="ProficiencyScaleSettings- Positive"><con:description>Get Proficiency scale settings</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="0850140d-3989-4ea0-9c5f-dcb4993f3fcc"><con:settings/><con:testStep type="groovy" name="Authentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("ProficiencyScaleSettings-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="GetOrganizationID"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("ProficiencyScaleSettings-Positive").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="ProficiencyScaleSettings-Positive"><con:settings/><con:config service="LMS ProficiencyScaleSettings RESTful service" resourcePath="/lms/api/organizations/{orgId}/datasettings" methodName="Profscalesettings" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ProficiencyScaleSettings-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/669/profscalesettings</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.proficiencyScaleSettings.size()
assert json.proficiencyScaleSettings.size() >1
assert json.proficiencyScaleSettings.proficiencyScaleId != null
assert json.proficiencyScaleSettings.prodOrgId != null
assert json.proficiencyScaleSettings.proficiencyScaleName != null
assert json.proficiencyScaleSettings.proficiencyScaleStartPctRange != null
assert json.proficiencyScaleSettings.proficiencyScaleEndPctRange != null

assert json.prodOrgOptions.size() == 2
assert json.prodOrgOptionName[0] == "Require student demographic data:" || json.prodOrgOptionName[1] == "Require student demographic data:"
assert json.prodOrgOptionName[1] == "Capture research data:" || json.prodOrgOptionName[0] == "Capture research data:"
assert json.prodOrgOptionId != null
assert json.prodOrgId != null
assert json.prodOrgOptionValue != null
}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1331"/>
  <con:entry key="prodId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="CopyProficiencySettings"><con:settings/><con:config><script>def profset = testRunner.getTestCase().getTestStepByName("ProficiencyScaleSettings-Positive").getProperty('Response').getValue()

testRunner.testCase.testSuite.project.setPropertyValue("ProficiencySettings",profset)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="ProficiencyScaleSettings- Negative"><con:description>Proficiency scale settings without the Authentication</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="5e1ff9e4-6135-4116-b2ec-c92cbae80ed8"><con:settings/><con:testStep type="groovy" name="Authentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()




headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")

testRunner.testCase.getTestStepByName("ProficiencyScaleSettings-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="GetOrganizationID"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("ProficiencyScaleSettings-Negative").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="ProficiencyScaleSettings-Negative"><con:settings/><con:config service="LMS ProficiencyScaleSettings RESTful service" resourcePath="/lms/api/organizations/{orgId}/datasettings" methodName="Profscalesettings" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ProficiencyScaleSettings-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/669/profscalesettings</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("401 Unauthorized")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert response.contains("No credentials have been provided.")

assert ! response.contains("User does not exist.")

}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1331"/>
  <con:entry key="prodId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="ProficiencyScaleSettingsDistrict"><con:description>Get Proficiency scale settings for district</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="0f4cc36e-cd96-4fc0-ab4e-2490a2405b68"><con:settings/><con:testStep type="groovy" name="Authentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("ProficiencyScaleSettingsDistrict").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="ProficiencyScaleSettingsDistrict"><con:settings/><con:config service="LMS ProficiencyScaleSettings RESTful service" resourcePath="/lms/api/organizations/{orgId}/datasettings" methodName="Profscalesettings" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ProficiencyScaleSettingsDistrict" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/669/profscalesettings</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.proficiencyScaleSettings.size()
assert json.proficiencyScaleSettings.size() >1
assert json.proficiencyScaleSettings.proficiencyScaleId != null
assert json.proficiencyScaleSettings.prodOrgId != null
assert json.proficiencyScaleSettings.proficiencyScaleName != null
assert json.proficiencyScaleSettings.proficiencyScaleStartPctRange != null
assert json.proficiencyScaleSettings.proficiencyScaleEndPctRange != null

assert json.prodOrgOptions.size() == 2
assert json.prodOrgOptionName[0] == "Require student demographic data:" || json.prodOrgOptionName[1] == "Require student demographic data:"
assert json.prodOrgOptionName[1] == "Capture research data:" || json.prodOrgOptionName[0] == "Capture research data:"
assert json.prodOrgOptionId != null
assert json.prodOrgId != null
assert json.prodOrgOptionValue != null


}
catch(Exception e) {
	log.warn "failed"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1"/>
  <con:entry key="prodId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="ProficiencyScaleSettings_options-Positive" disabled="true"><con:description>Get Proficiency scale  options</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="a23b539a-95ad-474d-b58a-e73f6b9bb21c"><con:settings/><con:testStep type="groovy" name="Authenticate"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("ProficiencyScaleSettings_options-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="SetOrganizationId"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("ProficiencyScaleSettings_options-Positive").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="ProficiencyScaleSettings_options-Positive"><con:settings/><con:config service="LMS ProficiencyScaleSettings_options RESTful service" resourcePath="/lms/api/organizations/{orgId}/prodorgoptions" methodName="Prodorgoptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ProficiencyScaleSettings_options-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/670/prodorgoptions</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.prodOrgOptionName[0] == "Require student demographic data:" || json.prodOrgOptionName[1] == "Require student demographic data:"
assert json.prodOrgOptionName[1] == "Capture research data:" || json.prodOrgOptionName[0] == "Capture research data:"
assert json.prodOrgOptionId != null
assert json.prodOrgId != null
assert json.prodOrgOptionValue != null

}
catch(Exception e) {
	log.warn "failed"
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1191"/>
  <con:entry key="prodId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry>prodId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="CopyProficiencySettingsOptions"><con:settings/><con:config><script>// CopyProficiencySettingsOptions
// ProficiencyScaleSettings_options-Positive
def profset = testRunner.getTestCase().getTestStepByName("ProficiencyScaleSettings_options-Positive").getProperty('Response').getValue()

testRunner.testCase.testSuite.project.setPropertyValue("ProficiencySettingsOptions",profset)</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="ProficiencyScaleSettings_options-Negative" disabled="true"><con:description>Proficiency scale  options fails without the authentication</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="c1206c91-3bc6-4171-97f3-481778785eee"><con:settings/><con:testStep type="groovy" name="Authenticate"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()




headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")

testRunner.testCase.getTestStepByName("ProficiencyScaleSettings_options-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="SetOrganizationId"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("ProficiencyScaleSettings_options-Negative").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="ProficiencyScaleSettings_options-Negative"><con:settings/><con:config service="LMS ProficiencyScaleSettings_options RESTful service" resourcePath="/lms/api/organizations/{orgId}/prodorgoptions" methodName="Prodorgoptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ProficiencyScaleSettings_options-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/670/prodorgoptions</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("401 Unauthorized")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert response.contains("No credentials have been provided.")

assert ! response.contains("User does not exist.")

}
catch(Exception e) {
	log.warn "failed"
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1191"/>
  <con:entry key="prodId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry>prodId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="ProficiencyScaleSettingsDistrict_options-Positive" disabled="true"><con:description>Get Proficiency scale  options for district</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="b15c6673-7ef2-4808-a334-21bf21a7f024"><con:settings/><con:testStep type="groovy" name="Authenticate"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)
testRunner.testCase.getTestStepByName("ProficiencyScaleSettingsDistrict_options").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="ProficiencyScaleSettingsDistrict_options"><con:settings/><con:config service="LMS ProficiencyScaleSettings_options RESTful service" resourcePath="/lms/api/organizations/{orgId}/prodorgoptions" methodName="Prodorgoptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ProficiencyScaleSettingsDistrict_options" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/organizations/670/prodorgoptions</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.prodOrgOptionName[0] == "Require student demographic data:" || json.prodOrgOptionName[1] == "Require student demographic data:"
assert json.prodOrgOptionName[1] == "Capture research data:" || json.prodOrgOptionName[0] == "Capture research data:"
assert json.prodOrgOptionId != null
assert json.prodOrgId != null
assert json.prodOrgOptionValue != null

}
catch(Exception e) {
	log.warn "failed"
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1"/>
  <con:entry key="prodId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>orgId</con:entry><con:entry>prodId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Proficiencyscalesettings_edit-Positive"><con:description>Edit Proficiency scale settings
Get Responces of Proficiencyscalesettings and Proficiencyscalesettings_options in the request and edit the Options for the OrganizationId 'ByOid' from project property.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="90c94671-8781-4a6e-8e15-fb796700e4b5"><con:settings/><con:testStep type="groovy" name="Authentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("Proficiencyscalesettings_edit-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="SetOrgID"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("Proficiencyscalesettings_edit-Positive").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   


// set query string
   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

// set the post/put payload
def jsonreq = ""
def jsonreqo = ""
def json =""
jsonreq = testRunner.testCase.testSuite.project.getPropertyValue("ProficiencySettings")
//jsonreqo = testRunner.testCase.testSuite.project.getPropertyValue("ProficiencySettingsOptions")

log.error jsonreq
log.error jsonreqo
jsonreq = jsonreq.replaceFirst("No", "Yes")

//json = jsonreq.replaceAll("null", jsonreqo)
//log.error json
testRunner.getTestCase().getTestStepByName("Proficiencyscalesettings_edit-Positive").getProperty('Request').setValue(jsonreq)





def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Proficiencyscalesettings_edit-Positive"><con:settings/><con:config service="LMS proficiencyscalesettings_edit RESTful service" resourcePath="/lms/api/organizations/{orgId}/datasettings" methodName="Profscalesettings" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Proficiencyscalesettings_edit-Positive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{"proficiencyScaleSettings":[{"proficiencyScaleId":8079,"prodOrgId":1329,"proficiencyScaleName":"50","proficiencyScaleStartPctRange":70.0,"proficiencyScaleEndPctRange":100.0},{"proficiencyScaleId":8080,"prodOrgId":1329,"proficiencyScaleName":"40","proficiencyScaleStartPctRange":60.0,"proficiencyScaleEndPctRange":69.0},{"proficiencyScaleId":8081,"prodOrgId":1329,"proficiencyScaleName":"30","proficiencyScaleStartPctRange":0.0,"proficiencyScaleEndPctRange":59.0}],"prodOrgOptions":[{"prodOrgOptionId":2702,"prodOrgId":1329,"prodOrgOptionName":"Require student demographic data:","prodOrgOptionValue":"Yes"},{"prodOrgOptionId":2703,"prodOrgId":1329,"prodOrgOptionName":"Capture research data:","prodOrgOptionValue":"Yes"}]}</con:request><con:originalUri>http://10.40.222.44/lms/api/organizations/670/profscalesettings</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
	assert response == null
	assert ! response.contains("Service Temporarily Unavailable")
	assert ! response.contains("not authorized")
	assert ! response.contains("User does not exist.")

	//JSON Asserts
	def slurper = new JsonSlurper()
	def json = slurper.parseText response

	assert json != null
	assert json.status == "1"
}
catch(Exception e) {
	log.warn "failed"
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="orgId" value="1331" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Proficiencyscalesettings_edit-Negative"><con:description>Edit Proficiency scale settings by providing wrong organization ID
</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="a11b41ab-631a-482d-90fe-d9468042c281"><con:settings/><con:testStep type="groovy" name="Authentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("Proficiencyscalesettings_edit-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="SetOrgID"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("Proficiencyscalesettings_edit-Negative").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   


// set query string
   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

// set the post/put payload
def jsonreq = ""
def jsonreqo = ""
def json =""
jsonreq = testRunner.testCase.testSuite.project.getPropertyValue("ProficiencySettings")
jsonreqo = testRunner.testCase.testSuite.project.getPropertyValue("ProficiencySettingsOptions")

log.error jsonreq
log.error jsonreqo
jsonreqo = jsonreqo.replaceFirst("No", "Yes")

json = jsonreq.replaceAll("null", jsonreqo)
log.error json
testRunner.getTestCase().getTestStepByName("Proficiencyscalesettings_edit-Negative").getProperty('Request').setValue(json)





def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("OidTest-Negative"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Proficiencyscalesettings_edit-Negative"><con:settings/><con:config service="LMS proficiencyscalesettings_edit RESTful service" resourcePath="/lms/api/organizations/{orgId}/datasettings" methodName="Profscalesettings" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Proficiencyscalesettings_edit-Negative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{"proficiencyScaleSettings":[{"proficiencyScaleId":8079,"prodOrgId":1329,"proficiencyScaleName":"50","proficiencyScaleStartPctRange":70.0,"proficiencyScaleEndPctRange":100.0},{"proficiencyScaleId":8080,"prodOrgId":1329,"proficiencyScaleName":"40","proficiencyScaleStartPctRange":60.0,"proficiencyScaleEndPctRange":69.0},{"proficiencyScaleId":8081,"prodOrgId":1329,"proficiencyScaleName":"30","proficiencyScaleStartPctRange":0.0,"proficiencyScaleEndPctRange":59.0}],"prodOrgOptions":[{"prodOrgOptionId":2702,"prodOrgId":1329,"prodOrgOptionName":"Require student demographic data:","prodOrgOptionValue":"Yes"},{"prodOrgOptionId":2703,"prodOrgId":1329,"prodOrgOptionName":"Capture research data:","prodOrgOptionValue":"Yes"}]}</con:request><con:originalUri>http://10.40.222.44/lms/api/organizations/670/profscalesettings</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
try {
	assert response != null
	assert ! response.contains("Service Temporarily Unavailable")
	assert ! response.contains("not authorized")
	assert ! response.contains("User does not exist.")

	//JSON Asserts
	def slurper = new JsonSlurper()
	def json = slurper.parseText response


assert json.errorMessage == "null"

}
catch(Exception e) {
	log.warn "failed"
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="orgId" value="-999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>orgId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="SearchForLicenses-Positive"><con:description>Get the list of licenses for the super user </con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="92f6ddad-fb8d-4099-b62b-531c672ba950"><con:settings/><con:testStep type="groovy" name="Setauthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("SearchForLicenses-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchForLicenses-Positive"><con:settings/><con:config service="LMS Licenses RESTful service" resourcePath="/lms/api/license" methodName="License" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchForLicenses-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.size()
assert json.size() > 1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="FetchorgIdforLicence"><con:settings/><con:config><script>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper


def response = context.response //.responseContent
log.info response
def slurper = new JsonSlurper()
def json = slurper.parseText response
//moving entity id from product listing page to add to cart 

def jsonreq = testRunner.getTestCase().getTestStepByName("SearchForLicenses-Positive").getProperty('Response').getValue()
log.error jsonreq
def list = slurper.parseText jsonreq 
log.error list
log.info list["organizationId"][0]
testRunner.testCase.testSuite.project.setPropertyValue("LicenseOid",list["organizationId"][0].toString())

log.info list["licenseKey"][0]
testRunner.testCase.testSuite.project.setPropertyValue("ProdLicensekey",list["licenseKey"][0])</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="SearchForLicenses-Negative"><con:description>Get the list of licenses for the super user organizations</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="303939c0-d70d-44fa-9dc6-ddcfae416132"><con:settings/><con:testStep type="groovy" name="Setauthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()




headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")

testRunner.testCase.getTestStepByName("SearchForLicenses-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchForLicenses-Negative"><con:settings/><con:config service="LMS Licenses RESTful service" resourcePath="/lms/api/license" methodName="License" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchForLicenses-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("401 Unauthorized")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry><con:entry>orgId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="SearchLicenseByOid-Positive"><con:description>Get the list of licenses for the super user organizations</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="539691d1-b9c5-41c8-ab18-88d93963fa36"><con:settings/><con:testStep type="groovy" name="Setauthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("SearchLicenseByOid-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="Get orgId"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("SearchLicenseByOid-Positive").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("ByOid"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchLicenseByOid-Positive"><con:settings/><con:config service="LMS Licenses RESTful service" resourcePath="/lms/api/license" methodName="License" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchLicenseByOid-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

//log.info json.size()
//assert json.size() > 0

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="orgId" value="1331" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = context.response
log.info " V E R I F Y I N G   T H E   R E S P O N S E"

//Basic Verification
assert response != null
assert !response.contains("Service Temporarily Unavailable")
log.info "Response is NOT null and service is available"

//Check response code and status
String respStatus = testRunner.testCase.testSteps["SearchLicenseByOid-Positive"].testRequest.response.responseHeaders["#status#"]
assert respStatus.contains('HTTP/1.1 200 OK')
log.info "Response status code and message  verified! - 200 OK"

//JSON Asserts - Parsing the JSON Response
def slurper = new JsonSlurper()
def json = slurper.parseText response


//Fetching the Org Data from Database
library = testRunner.testCase.testSuite.project.testSuites["LibrarySuite"]
module = library.testCases["DBConnect"].testSteps["Connect_DB"]
module.run(testRunner, context)
def connDB = context.Connect_DB

//Refering the existing current result set
def orgData = context.CurrResSet

//Verifying the response data
assert json.organizationId == orgData[0]['organization_id'].toString()
//assert json.organizationName == orgData[0]['organization_name'].toString()
//assert json.organizationTypeId == orgData[0]['organization_type_id'].toString()
//assert json.parentOrganizationId == orgData[0]['parent_organization_id'].toString()
//assert json.sifRefId == orgData[0]['sif_refid'].toString()

//Verifying the product id to which the organization belongs to
def rSet = connDB.execute_Query("select product_id from school.organization_product where  organization_id =" + testRunner.testCase.testSuite.project.getPropertyValue("LicenseOid"))
assert json.productId == rSet[0]['product_id'].toString()
log.info "Verified organization data!"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="SearchLicenseByOid-Negative"><con:description>Get the list of licenses for the super user organizations</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="65756958-4c06-4495-8918-d04e435391bd"><con:settings/><con:testStep type="groovy" name="Setauthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

testRunner.testCase.getTestStepByName("SearchLicenseByOid-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="Get orgId"><con:settings/><con:config><script>


def testRequest = testRunner.testCase.getTestStepByName("SearchLicenseByOid-Negative").testRequest

httpRequest =testRequest
propertyHolder = httpRequest.getParams()   

   if(propertyHolder){
      queryString = changeOid(httpRequest,propertyHolder)
   }else{
      queryString = ""
   }

def changeOid(httpRequest,propertyHolder){    
   queryString = "?"   
   for( properties in propertyHolder){
   	if (properties.key == "orgId")
   	{
      log.info "Name is ${properties.key}"
      value1 = properties.key
      value = httpRequest.getProperty("${value1}").getValue()
       log.info "Value is ${value}"
        httpRequest.getProperty("${value1}").setValue(testRunner.testCase.testSuite.project.getPropertyValue("OidTest-Negative"))
      if(value){
         if(queryString.length() == 1){
            queryString = queryString + properties.key + "=" + value
         }else{
            queryString = queryString + "&amp;" + properties.key + "=" + value
         }
      }      
   }   
   }
   log.info "queryString is ${value}"   
   return queryString
}</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchLicenseByOid-Negative"><con:settings/><con:config service="LMS Licenses RESTful service" resourcePath="/lms/api/license" methodName="License" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchLicenseByOid-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
//assert response.contains("Uunsupported content-type")

//JSON Asserts
//def slurper = new JsonSlurper()
//def json = slurper.parseText response
//
//assert json == null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="-999"/>
  <con:entry key="personId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>personId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = context.response
log.info " V E R I F Y I N G   T H E   R E S P O N S E"

//Basic Verification
assert response != null
assert !response.contains("Service Temporarily Unavailable")
log.info "Response is NOT null and service is available"

//Check response code and status
String respStatus = testRunner.testCase.testSteps["SearchLicenseByOid-Positive"].testRequest.response.responseHeaders["#status#"]
assert respStatus.contains('HTTP/1.1 200 OK')
log.info "Response status code and message  verified! - 200 OK"

//JSON Asserts - Parsing the JSON Response
def slurper = new JsonSlurper()
def json = slurper.parseText response


//Fetching the Org Data from Database
library = testRunner.testCase.testSuite.project.testSuites["LibrarySuite"]
module = library.testCases["DBConnect"].testSteps["Connect_DB"]
module.run(testRunner, context)
def connDB = context.Connect_DB

//Refering the existing current result set
def orgData = context.CurrResSet

//Verifying the response data
assert json.organizationId == orgData[0]['organization_id'].toString()
//assert json.organizationName == orgData[0]['organization_name'].toString()
//assert json.organizationTypeId == orgData[0]['organization_type_id'].toString()
//assert json.parentOrganizationId == orgData[0]['parent_organization_id'].toString()
//assert json.sifRefId == orgData[0]['sif_refid'].toString()

//Verifying the product id to which the organization belongs to
def rSet = connDB.execute_Query("select product_id from school.organization_product where  organization_id =" + testRunner.testCase.testSuite.project.getPropertyValue("LicenseOid"))
assert json.productId == rSet[0]['product_id'].toString()
log.info "Verified organization data!"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="SearchLicenseByOidDistrict-Positive"><con:description>Get the list of licenses for the super user organizations</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="8a1291ce-cd98-41fd-a2de-1e16388aa3cb"><con:settings/><con:testStep type="groovy" name="Setauthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap



def headers = new StringToStringsMap()

def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)


testRunner.testCase.getTestStepByName("SearchLicenseByOidDistrict-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="SearchLicenseByOidDistrict-Positive"><con:settings/><con:config service="LMS Licenses RESTful service" resourcePath="/lms/api/license" methodName="License" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SearchLicenseByOidDistrict-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("200 OK")
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
//def slurper = new JsonSlurper()
//def json = slurper.parseText response
//
//assert json == null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orgId" value="1"/>
  <con:entry key="personId" value="1"/>
</con:parameters><con:parameterOrder><con:entry>personId</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql
import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = context.response
log.info " V E R I F Y I N G   T H E   R E S P O N S E"

//Basic Verification
assert response != null
assert !response.contains("Service Temporarily Unavailable")
log.info "Response is NOT null and service is available"

//Check response code and status
String respStatus = testRunner.testCase.testSteps["SearchLicenseByOid-Positive"].testRequest.response.responseHeaders["#status#"]
assert respStatus.contains('HTTP/1.1 200 OK')
log.info "Response status code and message  verified! - 200 OK"

//JSON Asserts - Parsing the JSON Response
def slurper = new JsonSlurper()
def json = slurper.parseText response


//Fetching the Org Data from Database
library = testRunner.testCase.testSuite.project.testSuites["LibrarySuite"]
module = library.testCases["DBConnect"].testSteps["Connect_DB"]
module.run(testRunner, context)
def connDB = context.Connect_DB

//Refering the existing current result set
def orgData = context.CurrResSet

//Verifying the response data
assert json.organizationId == orgData[0]['organization_id'].toString()
//assert json.organizationName == orgData[0]['organization_name'].toString()
//assert json.organizationTypeId == orgData[0]['organization_type_id'].toString()
//assert json.parentOrganizationId == orgData[0]['parent_organization_id'].toString()
//assert json.sifRefId == orgData[0]['sif_refid'].toString()

//Verifying the product id to which the organization belongs to
def rSet = connDB.execute_Query("select product_id from school.organization_product where  organization_id =" + testRunner.testCase.testSuite.project.getPropertyValue("LicenseOid"))
assert json.productId == rSet[0]['product_id'].toString()
log.info "Verified organization data!"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationProdInfo-Positive"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="5289844c-f81e-4e0a-ba17-45ffa1a6d843"><con:settings/><con:testStep type="groovy" name="SetAuthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()


def jsonreqL = testRunner.testCase.testSuite.project.getPropertyValue("ProdLicensekey")
log.info jsonreqL
def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)
headers.put("licenseKey",jsonreqL)



testRunner.testCase.getTestStepByName("OrganizationProdInfo-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationProdInfo-Positive"><con:settings/><con:config service="LMS OrganizationProdInfo RESTful service" resourcePath="/lms/api/license/prodinfo" methodName="Prodinfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationProdInfo-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  <con:entry key="licenseKey" value="wQ*KF&lt;h1BG7%5SZZ872vNFS=@V2BY&lt;xn3&amp;6W*Qc6M&amp;+h3GsVfG*h#5Fw"/>
  <con:entry key="Accept" value="application/json, text/plain, */*"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license/prodinfo</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
log.warn response
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.orgList.size()
assert json.orgList.size() > 1
log.info json.productList.size()
assert json.productList.size() > 0

//"productsList": null

//   "keyVersion": 0,
//   "concurrentUseForBundle": -1,
//   "concurrentUseForProduct": null,
//   "key": null,
//   "expiryDate": null,
//   "startGrade": null,
//   "endGrade": null,
//   "licenseType": null,
//   "organizationId": null,
//   "errorCode": null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationProdInfo-Negative"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="0ceb9bb4-41fc-4987-bad7-fe0d38cd6d39"><con:settings/><con:testStep type="groovy" name="SetAuthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()


def jsonreqL = testRunner.testCase.testSuite.project.getPropertyValue("ProdLicensekey")
log.info jsonreqL

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")
headers.put("licenseKey",jsonreqL)


testRunner.testCase.getTestStepByName("OrganizationProdInfo-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationProdInfo-Negative"><con:settings/><con:config service="LMS OrganizationProdInfo RESTful service" resourcePath="/lms/api/license/prodinfo" methodName="Prodinfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationProdInfo-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="licenseKey" value="wQ*KF&lt;h1BG7%5SZZ872vNFS=@V2BY&lt;xn3&amp;6W*Qc6M&amp;+h3GsVfG*h#5Fw"/>
  <con:entry key="Accept" value="application/json, text/plain, */*"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license/prodinfo</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response

assert resHeaders["#status#"][0].contains("401 Unauthorized")
try {
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json == null

}
catch(Exception e) {
	log.warn "failed"
}


//"productsList": null

//   "keyVersion": 0,
//   "concurrentUseForBundle": -1,
//   "concurrentUseForProduct": null,
//   "key": null,
//   "expiryDate": null,
//   "startGrade": null,
//   "endGrade": null,
//   "licenseType": null,
//   "organizationId": null,
//   "errorCode": null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationProdInfo-invalid license"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="27fedac8-d67b-4f8e-9663-f841bb8b38af"><con:settings/><con:testStep type="groovy" name="SetAuthentication"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()


def jsonreqL = testRunner.testCase.testSuite.project.getPropertyValue("ProdLicensekey")
log.info jsonreqL
def Authorization = testRunner.testCase.testSuite.project.getPropertyValue("SuperAuthorization")
log.info Authorization

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization", Authorization)

headers.put("licenseKey",jsonreqL+"1234")


testRunner.testCase.getTestStepByName("OrganizationProdInfo-invalid license").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationProdInfo-invalid license"><con:settings/><con:config service="LMS OrganizationProdInfo RESTful service" resourcePath="/lms/api/license/prodinfo" methodName="Prodinfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationProdInfo-invalid license" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  <con:entry key="licenseKey" value="wQ*KF&lt;h1BG7%5SZZ872vNFS=@V2BY&lt;xn3&amp;6W*Qc6M&amp;+h3GsVfG*h#5Fw1234"/>
  <con:entry key="Accept" value="application/json, text/plain, */*"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.40.222.44/lms/api/license/prodinfo</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

// RESPONSE Asserts
def response = messageExchange.response.responseContent
log.warn response
assert response != null
assert ! response.contains("Service Temporarily Unavailable")
assert ! response.contains("not authorized")
assert ! response.contains("User does not exist.")

//JSON Asserts
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.orgList == ""
log.info json.productList == ""


//"productsList": null

//   "keyVersion": 0,
//   "concurrentUseForBundle": -1,
//   "concurrentUseForProduct": null,
//   "key": null,
//   "expiryDate": null,
//   "startGrade": null,
//   "endGrade": null,
//   "licenseType": null,
//   "organizationId": null,
//   "errorCode": null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="personId" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>personId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="UserProfileTestSuite" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="a6c777d7-29fa-4e2f-9fe9-5ff951d1b7c3"><con:settings/><con:testStep type="groovy" name="Base64API"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()



def s = 'super:super'
String encoded = s.bytes.encodeBase64().toString()
log.warn encoded

headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Accept-Encoding","gzip, deflate")
//headers.put("Connection","keep-alive")


/**
	super/super
	adminschool/adminschool
	admindistrict/admindistrict
	sys1/admin123*
	sys2/admin123*
	dist1/admin123*
	dist2/admin123*
	school1/admin123*
	school2/admin123* 
**/

/**** SUPER ADMIN or SYSTEM ADMIN *****/
def user  = "super"
def pwd   = "super"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SUPER ADMIN>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-super").getTestRequest().setRequestHeaders(headers)


/****  ADMIN SCHOOL *****/
user  = "adminschool"
pwd   = "adminschool"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "ADMIN SCHOOL>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-adminschool").getTestRequest().setRequestHeaders(headers)


/****  ADMIN SCHOOL *****/
user  = "admindistrict"
pwd   = "admindistrict"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "ADMIN DISTRICT>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-admindistrict").getTestRequest().setRequestHeaders(headers)

/****  SYS1 *****/
user  = "sys1"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SYS1 SCHOOL>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-sys1").getTestRequest().setRequestHeaders(headers)

/****  SYS2 *****/
user  = "sys2"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SYS2 SCHOOL>>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-sys2").getTestRequest().setRequestHeaders(headers)

/****  DIST1 *****/
user  = "dist1"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "DIST1 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-dist1").getTestRequest().setRequestHeaders(headers)

/****  DIST2 *****/
user  = "dist2"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "DIST2 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-dist2").getTestRequest().setRequestHeaders(headers)

/****  SCHOOL1 *****/
user  = "school1"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SCHOOL1 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-school1").getTestRequest().setRequestHeaders(headers)

/****  SCHOOL2 *****/
user  = "school2"
pwd   = "admin123*"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "SCHOOL2 >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-school2").getTestRequest().setRequestHeaders(headers)


/****  STUKA *****/
user  = "stuka"
pwd   = "stuka"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
//encoded = encoded.contains("=") ? encoded : encoded + "="
headers.put("Authorization",encoded)
log.info "STUKA >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-stuka").getTestRequest().setRequestHeaders(headers)


/****  GRADEONE *****/
user  = "gradeone"
pwd   = "gradeone"
s =""
encoded=""
headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
s = user + ":" + pwd
encoded = "Basic " + s.bytes.encodeBase64().toString()
headers.put("Authorization",encoded)
log.info "GRADEONE >>" + encoded

testRunner.testCase.getTestStepByName("UserProfileTest-gradeone").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) 
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-super"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-super" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "super"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-adminschool"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-adminschool" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YWRtaW5zY2hvb2w6YWRtaW5zY2hvb2w="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "adminschool"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null



/**import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
assert response.contains("not authorized")
**/
/**def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "super"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-admindistrict"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-admindistrict" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic YWRtaW5kaXN0cmljdDphZG1pbmRpc3RyaWN0="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("User does not exist.")

/**/def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "admindistrict"
assert json.guid != null
assert json.userPassword != null







/** import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
assert response.contains("not authorized")
**/

/**def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "super"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-sys1"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-sys1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3lzMTphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("User does not exist.")

/**/def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "sys1"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

/**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-sys2"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-sys2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3lzMjphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("User does not exist.")

/**/def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "sys2"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

/**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-dist1"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-dist1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ZGlzdDE6YWRtaW4xMjMq="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("The user's role is not authorized to access these servies.")

def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "dist1"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-dist2"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-dist2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic ZGlzdDI6YWRtaW4xMjMq="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("The user's role is not authorized to access these servies.")

def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "dist2"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-school1"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-school1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c2Nob29sMTphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("The user's role is not authorized to access these servies.")

def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "school1"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-school2"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-school2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c2Nob29sMjphZG1pbjEyMyo="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("The user's role is not authorized to access these servies.")

def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "school2"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-gradeone"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-gradeone" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic Z3JhZGVvbmU6Z3JhZGVvbmU="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("The user's role is not authorized to access these servies.")

def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "gradeone"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UserProfileTest-stuka"><con:settings/><con:config service="LMS User Profile RESTful Service" resourcePath="/lms/api/user/profile" methodName="Profile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserProfileTest-stuka" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3R1a2E6c3R1a2E="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/user/profile</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("The user's role is not authorized to access these servies.")

def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null

assert json.userName == "stuka"
assert json.guid != null
assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="OrganizationTestSuite" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true" id="9289b557-c472-4ad6-9fae-d75acb9eed82"><con:settings/><con:testStep type="groovy" name="SetupRESTfulTests"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()




headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")

testRunner.testCase.getTestStepByName("OrganizationsTest-Positive").getTestRequest().setRequestHeaders(headers)


headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
//headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")

testRunner.testCase.getTestStepByName("OrganizationsTest-Negative").getTestRequest().setRequestHeaders(headers)

// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL")) </script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationsTest-Positive"><con:settings/><con:config service="LMS Organizations RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationsTest-Positive" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("User does not exist.")

/**/def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.organization.size()
assert json.organization.size() > 1
//assert json.guid != null
//assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

/**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="FetchOrganizationOid"><con:settings/><con:config><script>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper



def response = context.response //.responseContent
log.info response
def slurper = new JsonSlurper()
def json = slurper.parseText response
//moving entity id from product listing page to add to cart 

def jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationsTest-Positive").getProperty('Response').getValue()
log.error jsonreq
def list = slurper.parseText jsonreq 
log.error list
log.info list["organization"]["organizationId"][2]

//for(String entityid : list["productList"]["entity_id"]) {
	//log.error entityid
jsonreq = testRunner.getTestCase().getTestStepByName("OrganizationBYOidTest-Positive").getProperty('Request').getValue()
	log.error jsonreq
	def jsonNew = jsonreq.replaceAll(/organizationId.:\"[0-9]*\"/,"organizationId\":\""list["organization"]["organizationId"][2]"\"")
	log.info jsonNew
	testRunner.getTestCase().getTestStepByName("OrganizationBYOidTest-Positive").getProperty('Request').setValue(jsonNew)


//	testRunner.runTestStepByName( "Add to cart 1")
//}

// "organizationId": "56",</script></con:config></con:testStep><con:testStep type="restrequest" name="OrganizationsTest-Negative"><con:settings/><con:config service="LMS Organizations RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OrganizationsTest-Negative" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json, text/plain, */*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request/><con:originalUri>http://10.10.21.98/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
//assert response.contains("User does not exist.")

/**/def slurper = new JsonSlurper()
def json = slurper.parseText response

assert json != null
log.info json.organization.size()
assert json.organization.size() > 1
//assert json.guid != null
//assert json.userPassword != null
//assert json.data.mesg == "Operation completed successfully"
//assert json.data.items != null

/**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="AddOrganizationTestSuite" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testcases" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AddOrganizationsTest-Positive"><con:settings/><con:config service="LMS Organization Add RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOrganizationsTest-Positive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "productId": "11",
    "organizationName": "New Schoolbmw11",
    "organizationTypeId": "2",
    "organizationDistrictNum": "IND5",
    "parentOrganizationId": "2",
    "sifRefId": "SuccessMaker"
}</con:request><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
assert response.contains("generated organization id")

/**/
/**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="AddOrganizationsTest-Negative"><con:settings/><con:config service="LMS Organization Add RESTful Service" resourcePath="/lms/api/organizations" methodName="Organizations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOrganizationsTest-Negative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "productId": "1",
    "organizationName": "New School123",
    "organizationTypeId": "2",
    "organizationDistrictNum": "IND2",
    "parentOrganizationId": "1",
    "sifRefId": "SuccessMaker"
}</con:request><con:originalUri>http://10.40.222.44/lms/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 

def response = messageExchange.response.responseContent
log.warn response
assert response.contains("ERROR: Organization Name Exists")

/**/
/**/</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Utilities" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="libraries" searchProperties="true" id="ce38b55c-3d42-47ef-a3c3-e3c0e9ae74b6"><con:settings/><con:testStep type="groovy" name="Env"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
/// sai prasad
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import groovy.json.JsonSlurper

class Env
{
    def log
    def context
    def testRunner
    def num
    def res
   
    def Env(logIn, contextIn, testRunnerIn)
    {
        this.log = logIn
        this.context = contextIn
        this.testRunner =testRunnerIn
        this.num =0
        this.res = ""
    }

    def setEndpoint(url)
    {


        this.num=0
        for(testStep in testRunner.testCase.getTestStepList()) {
            if(testStep instanceof WsdlTestRequestStep || testStep instanceof RestTestRequestStep) {
            testStep.getHttpRequest().setEndpoint(url)

            this.num++
            }
        }
        log.info "Updated endpoint REST  " +url+ "  for >> " + this.num
        return url
    }


    def setResource(url)
    {

       

        /**/
        this.num=0
        for(testStep in testRunner.testCase.getTestStepList()) {
            if(testStep instanceof WsdlTestRequestStep || testStep instanceof RestTestRequestStep) {
           
            res = testStep.getHttpRequest().getResource().getFullPath()
            log.warn num + "    ?    " + res
            res.replaceAll("/test123/", "/" + url + "/")
            log.info res
            //testStep.getHttpRequest().getResource().setPath(res)

            def method = context.getProperty( "requestUri" )
            // log the complete URI
            log.info( "this is it " + method.toString() )

            this.num++
            }
        }
        log.info "Updated Resource to endpoint REST  " +url+ "  for >> " + this.num
        /**/

       
        return url
    }


    def setHeaders() {
        def headers = new StringToStringsMap()

        num=0
        for(testStep in testRunner.testCase.getTestStepList()) {
            if(testStep instanceof WsdlTestRequestStep || testStep instanceof RestTestRequestStep) {
               
            headers = new StringToStringsMap()

            testStep.getTestRequest().setRequestHeaders(headers)

            num++
            }
        }
        log.info "Updated Headers for >> " + num
        return num
    }
}






log.info "Library Context start"
context.setProperty( "env", new Env(log, context, testRunner))

log.info "Library Context Done:"+context</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="LibrarySuite" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DBConnect" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Connect_DB"><con:settings/><con:config><script>import groovy.sql.Sql
import org.postgresql.Driver
import java.sql.CallableStatement
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Statement


com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("org.postgresql.Driver")

class Connect_DB
{
   def log
   def context
   def testRunner
   def currResSet
   
   def Connect_DB(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }
   
   def execute_Query(Query)
   {
   	String dbHost =  testRunner.testCase.testSuite.project.getPropertyValue("DBHost")
   	String dbPort =  testRunner.testCase.testSuite.project.getPropertyValue("DBPort")
   	String dbName =  testRunner.testCase.testSuite.project.getPropertyValue("DBName")
   	String dbUser =  testRunner.testCase.testSuite.project.getPropertyValue("DBUser")
   	String dbPassword =  testRunner.testCase.testSuite.project.getPropertyValue("DBPassword")
   	
	def JDBC = "jdbc:postgresql://" + dbHost + ":" + dbPort + "/" + dbName + "?user=" + dbUser + "&amp;password=" + dbPassword
	def sqlConn = Sql.newInstance( JDBC )
	def resSet = sqlConn.rows(Query)
	context.setProperty("CurrResSet", resSet)
	return resSet
   }


   def deleteOrganization( String orgName ) {
        boolean successFailure = false;
   	String dbHost =  testRunner.testCase.testSuite.project.getPropertyValue("DBHost")
   	String dbPort =  testRunner.testCase.testSuite.project.getPropertyValue("DBPort")
   	String dbName =  testRunner.testCase.testSuite.project.getPropertyValue("DBName")
   	String dbUser =  testRunner.testCase.testSuite.project.getPropertyValue("DBUser")
   	String dbPassword =  testRunner.testCase.testSuite.project.getPropertyValue("DBPassword")
   	
	def JDBC = "jdbc:postgresql://" + dbHost + ":" + dbPort + "/" + dbName + "?user=" + dbUser + "&amp;password=" + dbPassword
	def sqlConn = Sql.newInstance( JDBC )
	
        try {
            CallableStatement cst = null;
            ResultSet rs = null;
            cst = sqlConn.call '{call delete_organization_proc(?)}',[ orgName,], { dwells ->
   				 println dwells // => Northern Hemisphere
			}
            
            

            if ( rs != null ) {
                while ( rs.next() ) {
                    log.info( rs.getString( 1 ) );
                    if ( "1".equals( rs.getString( 1 ) ) ) {
                        successFailure = true;
                        break;
                    } else {
                        successFailure = false;
                    }
                }
            }
            if ( rs != null ) {
                rs.close();
                rs = null;
            }
            if ( cst != null ) {
                cst.close();
                cst = null;
            }
            return successFailure;
        } catch ( SQLException e ) {
            log.warn( "SQL connection error" );
        }
        return successFailure;
    }

}

context.setProperty( "Connect_DB", new Connect_DB( log, context, testRunner) )
log.info "Library Context:"+context</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="AddLicense-Positive" disabled="true"><con:description>To verify addding the new licence for any organization</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="1aa484f1-8683-4cc6-9bac-8e8541a84987"><con:settings/><con:testStep type="groovy" name="Authenticate"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()


headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")



testRunner.testCase.getTestStepByName("AddLicense-Positive").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="GetOrgId&amp;LicenseKey"><con:settings/><con:config><script>def license = testRunner.testCase.testSuite.project.getPropertyValue("LicenseKey")
def OrgId = (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)

log.error license
log.error OrgId

///**/
def jsonNew = testRunner.getTestCase().getTestStepByName("AddLicense-Positive").getProperty('Request').getValue()
log.info jsonNew
jsonNew = jsonNew.replaceAll(/licenseKey.:."[^\\dA-Za-z ]"/,"licenseKey\":\""+license +"\"") 
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationId.:.[A-Z0-9]*./,"organizationId\":\""+OrgId +"\"")
testRunner.getTestCase().getTestStepByName("AddLicense-Positive").getProperty('Request').setValue(jsonNew)



</script></con:config></con:testStep><con:testStep type="restrequest" name="AddLicense-Positive"><con:settings/><con:config service="LMS AddLicense RESTful service" resourcePath="/lms/api/license/add" methodName="Add" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddLicense-Positive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "licenseKey": "8txKF&lt;h1BG7%5ymyT7gxY3TrDbXsd8Vptqrk>*fPY$5V6wBdyzJHN#T$",
    "organizationId":"1335"
}</con:request><con:originalUri>http://10.40.222.44/lms/api/license/add</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper

def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response


//RESPONSE asserts
assert response == null
assert resHeaders != null
assert resHeaders["#status#"][0].contains("201 Created")


try {
	assert ! response.contains("Service Temporarily Unavailable")
	assert ! response.contains("ERROR: Organization Name Exists")
	assert ! response.contains("ERROR: Organization ID Exists")
	assert ! response.contains("Parent Organization Does Not Exist")



	//JSON Asserts
	def slurper = new JsonSlurper()
	def json = slurper.parseText response

	assert json == null
	assert json.status != "1"
}
catch(Exception e) 
{
	log.warn("failure")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="AddLicense-Negative" disabled="true"><con:description>To verify addding the new licence for any organization</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="ceab17ac-1a08-4804-af4b-20043a83c5a8"><con:settings/><con:testStep type="groovy" name="Authenticate"><con:settings/><con:config><script>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developed for Pearson by Robosoft Technologies Pvt. Ltd.
/// (c) Pearson Inc.
///
///Abdul Asif
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap

def headers = new StringToStringsMap()


headers = new StringToStringsMap()
headers.put("Accept","application/json, text/plain, */*")
headers.put("Authorization","Basic c3VwZXI6c3VwZXI=")



testRunner.testCase.getTestStepByName("AddLicense-Negative").getTestRequest().setRequestHeaders(headers)


// get a reference to the library APILibrarySet 
library = testRunner.testCase.testSuite.project.testSuites["Utilities"]  
module = library.testCases["libraries"].testSteps["Env"]  
module.run(testRunner, context)  
def env  = context.env   
env.setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("URL"))</script></con:config></con:testStep><con:testStep type="groovy" name="GetOrgId&amp;LicenseKey"><con:settings/><con:config><script>def license = testRunner.testCase.testSuite.project.getPropertyValue("LicenseKey")
def OrgId = (Integer.parseInt(testRunner.testCase.testSuite.project.getPropertyValue("MaxOid"))+1)

log.error license
log.error OrgId

///**/
def jsonNew = testRunner.getTestCase().getTestStepByName("AddLicense-Negative").getProperty('Request').getValue()
log.info jsonNew
jsonNew = jsonNew.replaceAll(/licenseKey.:."[^\\dA-Za-z ]"/,"licenseKey\":\""+license +"\"") 
log.error jsonNew
jsonNew = jsonNew.replaceAll(/organizationId.:.[A-Z0-9]*./,"organizationId\":\""+OrgId +"\"")
testRunner.getTestCase().getTestStepByName("AddLicense-Positive").getProperty('Request').setValue(jsonNew)



</script></con:config></con:testStep><con:testStep type="restrequest" name="AddLicense-Negative"><con:settings/><con:config service="LMS AddLicense RESTful service" resourcePath="/lms/api/license/add" methodName="Add" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddLicense-Negative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="Basic c3VwZXI6c3VwZXI="/>
  &lt;con:entry key="Accept" value="application/json, text/plain, */*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.40.222.44</con:endpoint><con:request>{
    "licenseKey": "8txKF&lt;h1BG7%5ymyT7gxY3TrDbXsd8Vptqrk>*fPY$5V6wBdyzJHN#T$",
    "organizationId":"1280"
}</con:request><con:originalUri>http://10.40.222.44/lms/api/license/add</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper 
import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringsMap
import net.sf.json.groovy.JsonSlurper

def response = messageExchange.response.responseContent
def resHeaders = messageExchange.responseHeaders
log.warn response


//RESPONSE asserts
assert response != null
assert resHeaders != null
assert resHeaders["#status#"][0].contains("200 OK")


try {
	assert ! response.contains("Service Temporarily Unavailable")
	assert ! response.contains("ERROR: Organization Name Exists")
	assert ! response.contains("ERROR: Organization ID Exists")
	assert ! response.contains("Parent Organization Does Not Exist")



	//JSON Asserts
	def slurper = new JsonSlurper()
	def json = slurper.parseText response

	assert json != null
	assert json.errorMessage == "The License KEY already exists in the system. Please use another KEY."
	assert json.status != "1"
}
catch(Exception e) 
{
	log.warn("failure")
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="LicenceGenerartion" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GenerarteLicense" searchProperties="true" id="4ac16083-bd73-4d13-b6bc-024e62157b39"><con:settings/><con:testStep type="groovy" name="GenerarteLicense"><con:settings/><con:config><script>import groovy.sql.Sql
import org.postgresql.Driver
import java.sql.CallableStatement
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Statement

import com.pst.testautomation.fitnesse.license.*

//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.pst.testautomation.fitnesse.license.GenerateLicenseBundleForOrg")

class GenerarteLicense
{
  def log
def context
def testRunner
def currResSet
def ConcurrentUsersForTheBundleTo
def ExpireOn
def license
   
   def GenerarteLicense(logIn,contextIn,testRunnerIn)
   {
      this.log = logIn
      this.context = contextIn
      this.testRunner = testRunnerIn
   }
   

def generateLicense() {
        GenerateLicenseBundleForOrg generateLicenseBundleForOrg = new GenerateLicenseBundleForOrg()
        try {
            generateLicenseBundleForOrg.setConcurrentUsersForTheBundleTo( 125 )
            generateLicenseBundleForOrg.bundleWillExpireOn( "03/03/2016" )
            generateLicenseBundleForOrg.addALicenseUsingTheLicenseModelForConcurrentUsers( "MATH", "SUBSCRIPTION", 110 )
            license=generateLicenseBundleForOrg.generateLicense() 
            log.info license
            return license
        } catch ( Exception Ex ) {
            Ex.printStackTrace()
        }

    }
}

context.setProperty( "GenerarteLicense", new GenerarteLicense( log, context, testRunner) )
log.info "Library Context:"+context</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>library = testRunner.testCase.testSuite.project.testSuites["LicenceGenerartion"]
module = library.testCases["GenerarteLicense"].testSteps["GenerarteLicense"]


//Connecting DB
module.run(testRunner, context)
def genLic = context.GenerarteLicense

//Selecting Random Org ID from Organization Table and set it as ByOid property
genLic.generateLicense() //("SELECT * from school.organization order by random() fetch first 1 row only")</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>URL</con:name><con:value>http://10.40.222.44</con:value></con:property><con:property><con:name>OidTest-Negative</con:name><con:value>-999</con:value></con:property><con:property><con:name>ByOid</con:name><con:value>1331</con:value></con:property><con:property><con:name>MaxOid</con:name><con:value>1334</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>10.40.222.44</con:value></con:property><con:property><con:name>DBPort</con:name><con:value>5432</con:value></con:property><con:property><con:name>DBName</con:name><con:value>smdb</con:value></con:property><con:property><con:name>DBUser</con:name><con:value>successmaker</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>Smpwd2112</con:value></con:property><con:property><con:name>ProficiencySettings</con:name><con:value>{"proficiencyScaleSettings":[{"proficiencyScaleId":8079,"prodOrgId":1329,"proficiencyScaleName":"50","proficiencyScaleStartPctRange":70.0,"proficiencyScaleEndPctRange":100.0},{"proficiencyScaleId":8080,"prodOrgId":1329,"proficiencyScaleName":"40","proficiencyScaleStartPctRange":60.0,"proficiencyScaleEndPctRange":69.0},{"proficiencyScaleId":8081,"prodOrgId":1329,"proficiencyScaleName":"30","proficiencyScaleStartPctRange":0.0,"proficiencyScaleEndPctRange":59.0}],"prodOrgOptions":[{"prodOrgOptionId":2702,"prodOrgId":1329,"prodOrgOptionName":"Require student demographic data:","prodOrgOptionValue":"Yes"},{"prodOrgOptionId":2703,"prodOrgId":1329,"prodOrgOptionName":"Capture research data:","prodOrgOptionValue":"Yes"}]}</con:value></con:property><con:property><con:name>ProficiencySettingsOptions</con:name><con:value>[{"prodOrgOptionId":2600,"prodOrgId":1278,"prodOrgOptionName":"Require student demographic data:","prodOrgOptionValue":"Yes"},{"prodOrgOptionId":2601,"prodOrgId":1278,"prodOrgOptionName":"Capture research data:","prodOrgOptionValue":"Yes"}]</con:value></con:property><con:property><con:name>licenceByoid</con:name><con:value>[{"licenseKey":"jMyp22Tk^ggC3875%#3&lt;S3FF$j%fW35+f4wNG#4$r^zJ$jzgmR0hg0d1","organizationName":"Independence Elementary School","licenseType":"Flexible 1","expirationDate":"None","totalSeats":"100","numberInUse":0,"numberOfDenials":0,"licenseTypeId":0,"organizationId":39,"subjectName":null},{"licenseKey":"jMyp22Tk^ggC3875%#3&lt;S3FF$j%fW35+f4wNG#4$r^zJ$jzgmR0hg0d1","organizationName":"Main Street Elementary School","licenseType":"Flexible 1","expirationDate":"None","totalSeats":"100","numberInUse":0,"numberOfDenials":0,"licenseTypeId":0,"organizationId":40,"subjectName":null},{"licenseKey":"jMyp22Tk^ggC3875%#3&lt;S3FF$j%fW35+f4wNG#4$r^zJ$jzgmR0hg0d1","organizationName":"Oak Street Middle School","licenseType":"Flexible 1","expirationDate":"None","totalSeats":"100","numberInUse":0,"numberOfDenials":0,"licenseTypeId":0,"organizationId":41,"subjectName":null}]</con:value></con:property><con:property><con:name>LicenseOid</con:name><con:value>1213</con:value></con:property><con:property><con:name>ProdLicensekey</con:name><con:value>wQ*KF&lt;h1BG7%5SZZ872vNFS=@V2BY&lt;xn3&amp;6W*Qc6M&amp;+h3GsVfG*h#5Fw</con:value></con:property><con:property><con:name>LicenseKey</con:name><con:value>8txKF&lt;h1BG7%5ymyT7gxY3TrDbXsd8Vptqrk>*fPY$5V6wBdyzJHN#T$</con:value></con:property><con:property><con:name>SuperAuthorization</con:name><con:value>Basic c3VwZXI6c3VwZXI=</con:value></con:property><con:property><con:name>PersonId_super</con:name><con:value>2</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>